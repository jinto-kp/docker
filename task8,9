Task8
With docker-compose, run multple containers as a single service

1.)  An apache container, with the name 'my-website-1'. It should have a sample website bind mount to its root directory. The port to be exposed outside is 80
2.)  An nginx container, with the name 'my-website-2'. It should have a volume mounted to its root directory.The port to be exposed is 8080 (the nginx default index file should changed to "mynginx-your name")
3.)  A tomcat container. with the name 'my-website-3'. The port to be exposed is 8090

[ec2-user@ip-172-31-32-22 ~]$ vim docker-compose.yml
version: '3'

services:
  my-website-1:
    image : httpd:latest
    container_name: my-website-1
    restart: always
    ports:
    - "80:80"
    volumes:
     - ./website:/usr/local/apache2/htdocs/

  my-website-2:
    image : nginx:latest
    container_name: my-website-2
    restart: always
    ports:
    - "8080:80"
    volumes:
     - ./cctv-website-template:/usr/share/nginx/html/

  my-website-3:
    image : tomcat:latest
    container_name: my-website-3
    restart: always
    ports:
    - "8090:80"

[ec2-user@ip-172-31-32-22 ~]$ docker-compose -f docker-compose.yml config
service "my-website-1" refers to undefined network web-network: invalid compose project
[ec2-user@ip-172-31-32-22 ~]$ vim docker-compose.yml
[ec2-user@ip-172-31-32-22 ~]$ docker-compose -f docker-compose.yml config
service "my-website-1" refers to undefined volume - /home/ec2-user/website: invalid compose project
[ec2-user@ip-172-31-32-22 ~]$ vim docker-compose.yml
[ec2-user@ip-172-31-32-22 ~]$ vim docker-compose.yml
[ec2-user@ip-172-31-32-22 ~]$ docker-compose -f docker-compose.yml config
service "my-website-1" refers to undefined volume - ./website: invalid compose project
[ec2-user@ip-172-31-32-22 ~]$ vim docker-compose.yml
[ec2-user@ip-172-31-32-22 ~]$ docker-compose -f docker-compose.yml config
name: ec2-user
services:
  my-website-1:
    container_name: my-website-1
    image: httpd:latest
    networks:
      default: null
    ports:
    - mode: ingress
      target: 80
      published: "80"
      protocol: tcp
    restart: always
    volumes:
    - type: bind
      source: /home/ec2-user/website
      target: /usr/local/apache2/htdocs
      bind:
        create_host_path: true
  my-website-2:
    container_name: my-website-2
    image: nginx:latest
    networks:
      default: null
    ports:
    - mode: ingress
      target: 80
      published: "8080"
      protocol: tcp
    restart: always
    volumes:
    - type: bind
      source: /home/ec2-user/cctv-website-template
      target: /usr/share/nginx/html
      bind:
        create_host_path: true
  my-website-3:
    container_name: my-website-3
    image: tomcat:latest
    networks:
      default: null
    ports:
    - mode: ingress
      target: 80
      published: "8090"
      protocol: tcp
    restart: always
networks:
  default:
    name: ec2-user_default
[ec2-user@ip-172-31-32-22 ~]$ docker-compose up -d
[+] Running 8/8
 ⠿ my-website-3 Pulled                                                                                                                                                         15.8s
   ⠿ 10ac4908093d Pull complete                                                                                                                                                 5.1s
   ⠿ 6df15e605e38 Pull complete                                                                                                                                                 6.7s
   ⠿ 2db012dd504c Pull complete                                                                                                                                                11.9s
   ⠿ 8fa912900627 Pull complete                                                                                                                                                12.0s
   ⠿ f8fe20946c04 Pull complete                                                                                                                                                12.1s
   ⠿ 8093daf900d2 Pull complete                                                                                                                                                12.7s
   ⠿ 49c22a329043 Pull complete                                                                                                                                                12.7s
[+] Running 4/4
 ⠿ Network ec2-user_default  Created                                                                                                                                            0.1s
 ⠿ Container my-website-3    Started                                                                                                                                            2.0s
 ⠿ Container my-website-1    Started                                                                                                                                            2.1s
 ⠿ Container my-website-2    Started                                                                                                                                            2.1s
[ec2-user@ip-172-31-32-22 ~]$ docker-compose ps
NAME                IMAGE               COMMAND                  SERVICE             CREATED             STATUS              PORTS
my-website-1        httpd:latest        "httpd-foreground"       my-website-1        21 seconds ago      Up 18 seconds       0.0.0.0:80->80/tcp, :::80->80/tcp
my-website-2        nginx:latest        "/docker-entrypoint.…"   my-website-2        21 seconds ago      Up 18 seconds       0.0.0.0:8080->80/tcp, :::8080->80/tcp
my-website-3        tomcat:latest       "catalina.sh run"        my-website-3        21 seconds ago      Up 18 seconds       8080/tcp, 0.0.0.0:8090->80/tcp, :::8090->80/tcp
[ec2-user@ip-172-31-32-22 ~]$ vim docker-compose.yml
[ec2-user@ip-172-31-32-22 ~]$ 


task9
With the help of docker-compose spin up a wordpress+phpmyadmin+database containers running as a service with seperate volume for mysql as well as for wordpress.
Make sure all the three services are running fine.(phpmyadmin should accessible via public and make sure you can manage db via it)

version: '3'
[ec2-user@ip-172-31-32-22 ~]$ vim docker-compose.yml
services:
  db:
    image: mysql:5.7
    volumes:
      - db_vol:/var/lib/mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: mysqlroot
      MYSQL_DATABASE: wordpress
      MYSQL_USER: jinto
      MYSQL_PASSWORD: jinto123

  wordpress:
    depends_on:
      - db
    image: wordpress:latest
    volumes:
      - wp_vol:/var/www/html
    restart: always
    ports:
      - "80:80"
    environment:
      WORDPRESS_DB_HOST: db
      WORDPRESS_DB_USER: jinto
      WORDPRESS_DB_PASSWORD: jinto123
      WORDPRESS_DB_NAME: wordpress

  phpmyadmin:
    depends_on:
      - db
    image: phpmyadmin/phpmyadmin
    restart: always
    ports:
      - "8080:80"
    environment:
      PMA_HOST: db
      MYSQL_ROOT_PASSWORD: mysqlroot

volumes:
  db_vol:
  wp_vol:
[ec2-user@ip-172-31-32-22 ~]$ docker-compose -f docker-compose.yml config
name: ec2-user
services:
  db:
    environment:
      MYSQL_DATABASE: wordpress
      MYSQL_PASSWORD: jinto123
      MYSQL_ROOT_PASSWORD: mysqlroot
      MYSQL_USER: jinto
    image: mysql:5.7
    networks:
      default: null
    restart: always
    volumes:
    - type: volume
      source: db_vol
      target: /var/lib/mysql
      volume: {}
  phpmyadmin:
    depends_on:
      db:
        condition: service_started
    environment:
      MYSQL_ROOT_PASSWORD: mysqlroot
      PMA_HOST: db
    image: phpmyadmin/phpmyadmin
    networks:
      default: null
    ports:
    - mode: ingress
      target: 80
      published: "8080"
      protocol: tcp
    restart: always
  wordpress:
    depends_on:
      db:
        condition: service_started
    environment:
      WORDPRESS_DB_HOST: db
      WORDPRESS_DB_NAME: wordpress
      WORDPRESS_DB_PASSWORD: jinto123
      WORDPRESS_DB_USER: jinto
    image: wordpress:latest
    networks:
      default: null
    ports:
    - mode: ingress
      target: 80
      published: "80"
      protocol: tcp
    restart: always
    volumes:
    - type: volume
      source: wp_vol
      target: /var/www/html
      volume: {}
networks:
  default:
    name: ec2-user_default
volumes:
  db_vol:
    name: ec2-user_db_vol
  wp_vol:
    name: ec2-user_wp_vol
[ec2-user@ip-172-31-32-22 ~]$ 
[ec2-user@ip-172-31-32-22 ~]$ docker-compose up -d
[ec2-user@ip-172-31-32-22 ~]$ docker-compose ps
NAME                    IMAGE                   COMMAND                  SERVICE             CREATED             STATUS              PORTS
ec2-user-db-1           mysql:5.7               "docker-entrypoint.s…"   db                  3 minutes ago       Up 3 minutes        3306/tcp, 33060/tcp
ec2-user-phpmyadmin-1   phpmyadmin/phpmyadmin   "/docker-entrypoint.…"   phpmyadmin          3 minutes ago       Up 3 minutes        0.0.0.0:8080->80/tcp, :::8080->80/tcp
ec2-user-wordpress-1    wordpress:latest        "docker-entrypoint.s…"   wordpress           3 minutes ago       Up 3 minutes        0.0.0.0:80->80/tcp, :::80->80/tcp
[ec2-user@ip-172-31-32-22 ~]$ 


                          
